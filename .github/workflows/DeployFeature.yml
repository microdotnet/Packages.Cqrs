name: Deploy feature package

on:
  workflow_dispatch:
    inputs:
      version_suffix:
        description: Suffix for package version
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  checks: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build-and-test:
    name: Build and test code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build code
      run: dotnet build --no-restore --configuration Debug

    - name: Run tests
      run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"

    - name: Publish test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: DotNet tests
        path: "**/test-results.trx"
        reporter: dotnet-trx
        fail-on-error: true 

  package-and-push:
    name: Create package and push to feed
    runs-on: ubuntu-latest
    needs: [ build-and-test ]

    steps:
    - uses: actions/checkout@v4

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Create packages
      run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }} --version-suffix ${{ inputs.version_suffix }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: packages
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget ]
    steps:
    # Download the NuGet package created in the previous job
    - uses: actions/download-artifact@v3
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4

    # Publish all NuGet packages to NuGet.org
    # Use --skip-duplicate to prevent errors if a package with the same version already exists.
    # If you retry a failed workflow, already published packages will be skipped without error.
    - name: Publish NuGet package
      run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
